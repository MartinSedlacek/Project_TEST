
GccApplication2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000014  00800100  000003bc  00000450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003bc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000015  00800114  00800114  00000464  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000464  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000494  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000100  00000000  00000000  000004d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001541  00000000  00000000  000005d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b22  00000000  00000000  00001b15  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000b28  00000000  00000000  00002637  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000027c  00000000  00000000  00003160  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000005fa  00000000  00000000  000033dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000957  00000000  00000000  000039d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000110  00000000  00000000  0000432d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 aa 01 	jmp	0x354	; 0x354 <__vector_18>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ec eb       	ldi	r30, 0xBC	; 188
  7c:	f3 e0       	ldi	r31, 0x03	; 3
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a4 31       	cpi	r26, 0x14	; 20
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a4 e1       	ldi	r26, 0x14	; 20
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a9 32       	cpi	r26, 0x29	; 41
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 53 00 	call	0xa6	; 0xa6 <main>
  9e:	0c 94 dc 01 	jmp	0x3b8	; 0x3b8 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <main>:
enum AppStatus_ AppStatus=APP_WAIT;
 
 int main(void)
 {
	
	cli();
  a6:	f8 94       	cli
	sei();
  a8:	78 94       	sei
	//GPIO_Setup();
	serial_init();
  aa:	0e 94 5e 01 	call	0x2bc	; 0x2bc <serial_init>
	SPI_MasterInit();
  ae:	0e 94 dc 00 	call	0x1b8	; 0x1b8 <SPI_MasterInit>
	Display_ON();
  b2:	0e 94 f2 00 	call	0x1e4	; 0x1e4 <Display_ON>
	clear() ;
  b6:	0e 94 30 01 	call	0x260	; 0x260 <clear>
				break;
			}
			case(APP_WRITESCREEN):
			{
				
				AppStatus=APP_RUNNING;
  ba:	d2 e0       	ldi	r29, 0x02	; 2
	while(1) {	
		switch(AppStatus)
		{
			case(APP_WAIT):
			{
				send[0]=255;
  bc:	cf ef       	ldi	r28, 0xFF	; 255
				serial_poll_send(send,1);
				send[0]=198;
  be:	0f 2e       	mov	r0, r31
  c0:	f6 ec       	ldi	r31, 0xC6	; 198
  c2:	cf 2e       	mov	r12, r31
  c4:	f0 2d       	mov	r31, r0
				serial_poll_send(send,1);
				send[0]=255;
				_delay_ms(DELAY);
				serial_poll_send(send,1);
				send[0]=204;
  c6:	0f 2e       	mov	r0, r31
  c8:	fc ec       	ldi	r31, 0xCC	; 204
  ca:	df 2e       	mov	r13, r31
  cc:	f0 2d       	mov	r31, r0
				serial_poll_send(send,1);
				send[0]=255;
				_delay_ms(DELAY);
				serial_poll_send(send,1);
				send[0]=210;
  ce:	0f 2e       	mov	r0, r31
  d0:	f2 ed       	ldi	r31, 0xD2	; 210
  d2:	ef 2e       	mov	r14, r31
  d4:	f0 2d       	mov	r31, r0
				serial_poll_send(send,1);
				send[0]=255;
				_delay_ms(DELAY);
				serial_poll_send(send,1);
				send[0]=216;
  d6:	0f 2e       	mov	r0, r31
  d8:	f8 ed       	ldi	r31, 0xD8	; 216
  da:	ff 2e       	mov	r15, r31
  dc:	f0 2d       	mov	r31, r0
				serial_poll_send(send,1);
				
				AppStatus=APP_WRITESCREEN;
  de:	01 e0       	ldi	r16, 0x01	; 1
			/*measure data to be implemented*/
			/*running time to be implemented*/
			/*clock mode to be implemented*/
			/*battery status to be implemented*/
			/*.....*/
			AppStatus=APP_REFRESHSCREEN;
  e0:	13 e0       	ldi	r17, 0x03	; 3
	SPI_MasterInit();
	Display_ON();
	clear() ;
	//text();
	while(1) {	
		switch(AppStatus)
  e2:	80 91 14 01 	lds	r24, 0x0114	; 0x800114 <__data_end>
  e6:	81 30       	cpi	r24, 0x01	; 1
  e8:	09 f4       	brne	.+2      	; 0xec <main+0x46>
  ea:	5d c0       	rjmp	.+186    	; 0x1a6 <main+0x100>
  ec:	38 f0       	brcs	.+14     	; 0xfc <main+0x56>
  ee:	82 30       	cpi	r24, 0x02	; 2
  f0:	09 f4       	brne	.+2      	; 0xf4 <main+0x4e>
  f2:	5c c0       	rjmp	.+184    	; 0x1ac <main+0x106>
  f4:	83 30       	cpi	r24, 0x03	; 3
  f6:	09 f4       	brne	.+2      	; 0xfa <main+0x54>
  f8:	5c c0       	rjmp	.+184    	; 0x1b2 <main+0x10c>
  fa:	f5 cf       	rjmp	.-22     	; 0xe6 <main+0x40>
		{
			case(APP_WAIT):
			{
				send[0]=255;
  fc:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <send>
				serial_poll_send(send,1);
 100:	61 e0       	ldi	r22, 0x01	; 1
 102:	70 e0       	ldi	r23, 0x00	; 0
 104:	85 e1       	ldi	r24, 0x15	; 21
 106:	91 e0       	ldi	r25, 0x01	; 1
 108:	0e 94 7d 01 	call	0x2fa	; 0x2fa <serial_poll_send>
				send[0]=198;
 10c:	c0 92 15 01 	sts	0x0115, r12	; 0x800115 <send>
				serial_poll_send(send,1);
 110:	61 e0       	ldi	r22, 0x01	; 1
 112:	70 e0       	ldi	r23, 0x00	; 0
 114:	85 e1       	ldi	r24, 0x15	; 21
 116:	91 e0       	ldi	r25, 0x01	; 1
 118:	0e 94 7d 01 	call	0x2fa	; 0x2fa <serial_poll_send>
				send[0]=255;
 11c:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	8f e3       	ldi	r24, 0x3F	; 63
 122:	9c e9       	ldi	r25, 0x9C	; 156
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	f1 f7       	brne	.-4      	; 0x124 <main+0x7e>
 128:	00 c0       	rjmp	.+0      	; 0x12a <main+0x84>
 12a:	00 00       	nop
				_delay_ms(DELAY);
				serial_poll_send(send,1);
 12c:	61 e0       	ldi	r22, 0x01	; 1
 12e:	70 e0       	ldi	r23, 0x00	; 0
 130:	85 e1       	ldi	r24, 0x15	; 21
 132:	91 e0       	ldi	r25, 0x01	; 1
 134:	0e 94 7d 01 	call	0x2fa	; 0x2fa <serial_poll_send>
				send[0]=204;
 138:	d0 92 15 01 	sts	0x0115, r13	; 0x800115 <send>
				serial_poll_send(send,1);
 13c:	61 e0       	ldi	r22, 0x01	; 1
 13e:	70 e0       	ldi	r23, 0x00	; 0
 140:	85 e1       	ldi	r24, 0x15	; 21
 142:	91 e0       	ldi	r25, 0x01	; 1
 144:	0e 94 7d 01 	call	0x2fa	; 0x2fa <serial_poll_send>
				send[0]=255;
 148:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <send>
 14c:	8f e3       	ldi	r24, 0x3F	; 63
 14e:	9c e9       	ldi	r25, 0x9C	; 156
 150:	01 97       	sbiw	r24, 0x01	; 1
 152:	f1 f7       	brne	.-4      	; 0x150 <main+0xaa>
 154:	00 c0       	rjmp	.+0      	; 0x156 <main+0xb0>
 156:	00 00       	nop
				_delay_ms(DELAY);
				serial_poll_send(send,1);
 158:	61 e0       	ldi	r22, 0x01	; 1
 15a:	70 e0       	ldi	r23, 0x00	; 0
 15c:	85 e1       	ldi	r24, 0x15	; 21
 15e:	91 e0       	ldi	r25, 0x01	; 1
 160:	0e 94 7d 01 	call	0x2fa	; 0x2fa <serial_poll_send>
				send[0]=210;
 164:	e0 92 15 01 	sts	0x0115, r14	; 0x800115 <send>
				serial_poll_send(send,1);
 168:	61 e0       	ldi	r22, 0x01	; 1
 16a:	70 e0       	ldi	r23, 0x00	; 0
 16c:	85 e1       	ldi	r24, 0x15	; 21
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	0e 94 7d 01 	call	0x2fa	; 0x2fa <serial_poll_send>
				send[0]=255;
 174:	c0 93 15 01 	sts	0x0115, r28	; 0x800115 <send>
 178:	8f e3       	ldi	r24, 0x3F	; 63
 17a:	9c e9       	ldi	r25, 0x9C	; 156
 17c:	01 97       	sbiw	r24, 0x01	; 1
 17e:	f1 f7       	brne	.-4      	; 0x17c <main+0xd6>
 180:	00 c0       	rjmp	.+0      	; 0x182 <main+0xdc>
 182:	00 00       	nop
				_delay_ms(DELAY);
				serial_poll_send(send,1);
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	70 e0       	ldi	r23, 0x00	; 0
 188:	85 e1       	ldi	r24, 0x15	; 21
 18a:	91 e0       	ldi	r25, 0x01	; 1
 18c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <serial_poll_send>
				send[0]=216;
 190:	f0 92 15 01 	sts	0x0115, r15	; 0x800115 <send>
				serial_poll_send(send,1);
 194:	61 e0       	ldi	r22, 0x01	; 1
 196:	70 e0       	ldi	r23, 0x00	; 0
 198:	85 e1       	ldi	r24, 0x15	; 21
 19a:	91 e0       	ldi	r25, 0x01	; 1
 19c:	0e 94 7d 01 	call	0x2fa	; 0x2fa <serial_poll_send>
				
				AppStatus=APP_WRITESCREEN;
 1a0:	00 93 14 01 	sts	0x0114, r16	; 0x800114 <__data_end>
				serial_poll_send(send,1);
				send[0]=204;
				serial_poll_send(send,1);
				_delay_ms(100);
				Write_OLED_Char();*/
				break;
 1a4:	9e cf       	rjmp	.-196    	; 0xe2 <main+0x3c>
			}
			case(APP_WRITESCREEN):
			{
				
				AppStatus=APP_RUNNING;
 1a6:	d0 93 14 01 	sts	0x0114, r29	; 0x800114 <__data_end>
				break;
 1aa:	9b cf       	rjmp	.-202    	; 0xe2 <main+0x3c>
			/*measure data to be implemented*/
			/*running time to be implemented*/
			/*clock mode to be implemented*/
			/*battery status to be implemented*/
			/*.....*/
			AppStatus=APP_REFRESHSCREEN;
 1ac:	10 93 14 01 	sts	0x0114, r17	; 0x800114 <__data_end>
			break;
 1b0:	98 cf       	rjmp	.-208    	; 0xe2 <main+0x3c>
			while(i<6)
			{
				SPI_MasterTransmit_Data(rx_buffer.data[i+1]);
				i++;
			}*/
			AppStatus=APP_RUNNING;
 1b2:	d0 93 14 01 	sts	0x0114, r29	; 0x800114 <__data_end>
			break;
 1b6:	95 cf       	rjmp	.-214    	; 0xe2 <main+0x3c>

000001b8 <SPI_MasterInit>:
			i=0;		
		}	
		i++;
		
	 }
}
 1b8:	8f e2       	ldi	r24, 0x2F	; 47
 1ba:	84 b9       	out	0x04, r24	; 4
 1bc:	2a 9a       	sbi	0x05, 2	; 5
 1be:	81 e5       	ldi	r24, 0x51	; 81
 1c0:	8c bd       	out	0x2c, r24	; 44
 1c2:	08 95       	ret

000001c4 <SPI_MasterTransmit_Command>:
 1c4:	28 98       	cbi	0x05, 0	; 5
 1c6:	2a 98       	cbi	0x05, 2	; 5
 1c8:	8e bd       	out	0x2e, r24	; 46
 1ca:	0d b4       	in	r0, 0x2d	; 45
 1cc:	07 fe       	sbrs	r0, 7
 1ce:	fd cf       	rjmp	.-6      	; 0x1ca <SPI_MasterTransmit_Command+0x6>
 1d0:	2a 9a       	sbi	0x05, 2	; 5
 1d2:	08 95       	ret

000001d4 <SPI_MasterTransmit_Data>:
 1d4:	28 9a       	sbi	0x05, 0	; 5
 1d6:	2a 98       	cbi	0x05, 2	; 5
 1d8:	8e bd       	out	0x2e, r24	; 46
 1da:	0d b4       	in	r0, 0x2d	; 45
 1dc:	07 fe       	sbrs	r0, 7
 1de:	fd cf       	rjmp	.-6      	; 0x1da <SPI_MasterTransmit_Data+0x6>
 1e0:	2a 9a       	sbi	0x05, 2	; 5
 1e2:	08 95       	ret

000001e4 <Display_ON>:
 1e4:	29 9a       	sbi	0x05, 1	; 5
 1e6:	8f e1       	ldi	r24, 0x1F	; 31
 1e8:	9e e4       	ldi	r25, 0x4E	; 78
 1ea:	01 97       	sbiw	r24, 0x01	; 1
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <Display_ON+0x6>
 1ee:	00 c0       	rjmp	.+0      	; 0x1f0 <Display_ON+0xc>
 1f0:	00 00       	nop
 1f2:	29 98       	cbi	0x05, 1	; 5
 1f4:	8f e3       	ldi	r24, 0x3F	; 63
 1f6:	9c e9       	ldi	r25, 0x9C	; 156
 1f8:	01 97       	sbiw	r24, 0x01	; 1
 1fa:	f1 f7       	brne	.-4      	; 0x1f8 <Display_ON+0x14>
 1fc:	00 c0       	rjmp	.+0      	; 0x1fe <Display_ON+0x1a>
 1fe:	00 00       	nop
 200:	29 9a       	sbi	0x05, 1	; 5
 202:	8f ea       	ldi	r24, 0xAF	; 175
 204:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_MasterTransmit_Command>
 208:	9f ef       	ldi	r25, 0xFF	; 255
 20a:	21 ee       	ldi	r18, 0xE1	; 225
 20c:	84 e0       	ldi	r24, 0x04	; 4
 20e:	91 50       	subi	r25, 0x01	; 1
 210:	20 40       	sbci	r18, 0x00	; 0
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	e1 f7       	brne	.-8      	; 0x20e <Display_ON+0x2a>
 216:	00 c0       	rjmp	.+0      	; 0x218 <Display_ON+0x34>
 218:	00 00       	nop
 21a:	10 92 1a 01 	sts	0x011A, r1	; 0x80011a <i>
 21e:	e0 e0       	ldi	r30, 0x00	; 0
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	e0 50       	subi	r30, 0x00	; 0
 224:	ff 4f       	sbci	r31, 0xFF	; 255
 226:	80 81       	ld	r24, Z
 228:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_MasterTransmit_Command>
 22c:	e0 91 1a 01 	lds	r30, 0x011A	; 0x80011a <i>
 230:	ef 5f       	subi	r30, 0xFF	; 255
 232:	e0 93 1a 01 	sts	0x011A, r30	; 0x80011a <i>
 236:	e4 31       	cpi	r30, 0x14	; 20
 238:	98 f3       	brcs	.-26     	; 0x220 <Display_ON+0x3c>
 23a:	08 95       	ret

0000023c <setColumnAddress>:
 23c:	cf 93       	push	r28
 23e:	c8 2f       	mov	r28, r24
 240:	82 95       	swap	r24
 242:	8f 70       	andi	r24, 0x0F	; 15
 244:	80 61       	ori	r24, 0x10	; 16
 246:	8e 5f       	subi	r24, 0xFE	; 254
 248:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_MasterTransmit_Command>
 24c:	8c 2f       	mov	r24, r28
 24e:	8f 70       	andi	r24, 0x0F	; 15
 250:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_MasterTransmit_Command>
 254:	cf 91       	pop	r28
 256:	08 95       	ret

00000258 <setPageAddress>:
 258:	80 6b       	ori	r24, 0xB0	; 176
 25a:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <SPI_MasterTransmit_Command>
 25e:	08 95       	ret

00000260 <clear>:
 260:	1f 93       	push	r17
 262:	cf 93       	push	r28
 264:	df 93       	push	r29
 266:	10 e0       	ldi	r17, 0x00	; 0
 268:	81 2f       	mov	r24, r17
 26a:	0e 94 2c 01 	call	0x258	; 0x258 <setPageAddress>
 26e:	80 e0       	ldi	r24, 0x00	; 0
 270:	0e 94 1e 01 	call	0x23c	; 0x23c <setColumnAddress>
 274:	c0 e8       	ldi	r28, 0x80	; 128
 276:	d0 e0       	ldi	r29, 0x00	; 0
 278:	80 e0       	ldi	r24, 0x00	; 0
 27a:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SPI_MasterTransmit_Data>
 27e:	21 97       	sbiw	r28, 0x01	; 1
 280:	d9 f7       	brne	.-10     	; 0x278 <clear+0x18>
 282:	1f 5f       	subi	r17, 0xFF	; 255
 284:	18 30       	cpi	r17, 0x08	; 8
 286:	81 f7       	brne	.-32     	; 0x268 <clear+0x8>
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	08 95       	ret

00000290 <Write_OLED_Char>:

void Write_OLED_Char(void)
{
 290:	0f 93       	push	r16
 292:	1f 93       	push	r17
 294:	cf 93       	push	r28
 296:	df 93       	push	r29
	setPageAddress(2);
 298:	82 e0       	ldi	r24, 0x02	; 2
 29a:	0e 94 2c 01 	call	0x258	; 0x258 <setPageAddress>
 29e:	cb e1       	ldi	r28, 0x1B	; 27
 2a0:	d1 e0       	ldi	r29, 0x01	; 1
 2a2:	02 e2       	ldi	r16, 0x22	; 34
 2a4:	11 e0       	ldi	r17, 0x01	; 1
	uint8_t i=0;
		while (i<7)
		{
			SPI_MasterTransmit_Data(rx_buffer.data[i]);
 2a6:	89 91       	ld	r24, Y+
 2a8:	0e 94 ea 00 	call	0x1d4	; 0x1d4 <SPI_MasterTransmit_Data>

void Write_OLED_Char(void)
{
	setPageAddress(2);
	uint8_t i=0;
		while (i<7)
 2ac:	c0 17       	cp	r28, r16
 2ae:	d1 07       	cpc	r29, r17
 2b0:	d1 f7       	brne	.-12     	; 0x2a6 <Write_OLED_Char+0x16>
		{
			SPI_MasterTransmit_Data(rx_buffer.data[i]);
			i++;
		}
}
 2b2:	df 91       	pop	r29
 2b4:	cf 91       	pop	r28
 2b6:	1f 91       	pop	r17
 2b8:	0f 91       	pop	r16
 2ba:	08 95       	ret

000002bc <serial_init>:
	}
	
	*byte = buffer->data[buffer->oldest_index];
	buffer->oldest_index = ((buffer->oldest_index+1) % BUFFER_SIZE);
	return (enum BufferStatus) BUFFER_OK;
}
 2bc:	e4 e6       	ldi	r30, 0x64	; 100
 2be:	f0 e0       	ldi	r31, 0x00	; 0
 2c0:	80 81       	ld	r24, Z
 2c2:	8d 7f       	andi	r24, 0xFD	; 253
 2c4:	80 83       	st	Z, r24
 2c6:	82 e0       	ldi	r24, 0x02	; 2
 2c8:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7e00c0>
 2cc:	82 e2       	ldi	r24, 0x22	; 34
 2ce:	90 e0       	ldi	r25, 0x00	; 0
 2d0:	90 93 c5 00 	sts	0x00C5, r25	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
 2d4:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
 2d8:	e2 ec       	ldi	r30, 0xC2	; 194
 2da:	f0 e0       	ldi	r31, 0x00	; 0
 2dc:	80 81       	ld	r24, Z
 2de:	83 60       	ori	r24, 0x03	; 3
 2e0:	80 83       	st	Z, r24
 2e2:	e1 ec       	ldi	r30, 0xC1	; 193
 2e4:	f0 e0       	ldi	r31, 0x00	; 0
 2e6:	80 81       	ld	r24, Z
 2e8:	80 61       	ori	r24, 0x10	; 16
 2ea:	80 83       	st	Z, r24
 2ec:	80 81       	ld	r24, Z
 2ee:	88 60       	ori	r24, 0x08	; 8
 2f0:	80 83       	st	Z, r24
 2f2:	80 81       	ld	r24, Z
 2f4:	80 68       	ori	r24, 0x80	; 128
 2f6:	80 83       	st	Z, r24
 2f8:	08 95       	ret

000002fa <serial_poll_send>:
 2fa:	cf 93       	push	r28
 2fc:	df 93       	push	r29
 2fe:	61 15       	cp	r22, r1
 300:	71 05       	cpc	r23, r1
 302:	81 f0       	breq	.+32     	; 0x324 <serial_poll_send+0x2a>
 304:	dc 01       	movw	r26, r24
 306:	9c 01       	movw	r18, r24
 308:	26 0f       	add	r18, r22
 30a:	37 1f       	adc	r19, r23
 30c:	e0 ec       	ldi	r30, 0xC0	; 192
 30e:	f0 e0       	ldi	r31, 0x00	; 0
 310:	c6 ec       	ldi	r28, 0xC6	; 198
 312:	d0 e0       	ldi	r29, 0x00	; 0
 314:	90 81       	ld	r25, Z
 316:	95 ff       	sbrs	r25, 5
 318:	fd cf       	rjmp	.-6      	; 0x314 <serial_poll_send+0x1a>
 31a:	9d 91       	ld	r25, X+
 31c:	98 83       	st	Y, r25
 31e:	a2 17       	cp	r26, r18
 320:	b3 07       	cpc	r27, r19
 322:	c1 f7       	brne	.-16     	; 0x314 <serial_poll_send+0x1a>
 324:	cb 01       	movw	r24, r22
 326:	df 91       	pop	r29
 328:	cf 91       	pop	r28
 32a:	08 95       	ret

0000032c <bufferWriteSimple>:
 32c:	fc 01       	movw	r30, r24
 32e:	26 81       	ldd	r18, Z+6	; 0x06
 330:	41 e0       	ldi	r20, 0x01	; 1
 332:	42 0f       	add	r20, r18
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	e2 0f       	add	r30, r18
 338:	f3 1f       	adc	r31, r19
 33a:	60 83       	st	Z, r22
 33c:	f9 01       	movw	r30, r18
 33e:	ed 5d       	subi	r30, 0xDD	; 221
 340:	fe 4f       	sbci	r31, 0xFE	; 254
 342:	60 83       	st	Z, r22
 344:	46 30       	cpi	r20, 0x06	; 6
 346:	21 f0       	breq	.+8      	; 0x350 <bufferWriteSimple+0x24>
 348:	fc 01       	movw	r30, r24
 34a:	46 83       	std	Z+6, r20	; 0x06
 34c:	80 e0       	ldi	r24, 0x00	; 0
 34e:	08 95       	ret
 350:	82 e0       	ldi	r24, 0x02	; 2
 352:	08 95       	ret

00000354 <__vector_18>:



ISR(USART_RX_vect){
 354:	1f 92       	push	r1
 356:	0f 92       	push	r0
 358:	0f b6       	in	r0, 0x3f	; 63
 35a:	0f 92       	push	r0
 35c:	11 24       	eor	r1, r1
 35e:	2f 93       	push	r18
 360:	3f 93       	push	r19
 362:	4f 93       	push	r20
 364:	5f 93       	push	r21
 366:	6f 93       	push	r22
 368:	7f 93       	push	r23
 36a:	8f 93       	push	r24
 36c:	9f 93       	push	r25
 36e:	af 93       	push	r26
 370:	bf 93       	push	r27
 372:	ef 93       	push	r30
 374:	ff 93       	push	r31
	status = bufferWriteSimple(&rx_buffer, UDR0);
 376:	60 91 c6 00 	lds	r22, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 37a:	8b e1       	ldi	r24, 0x1B	; 27
 37c:	91 e0       	ldi	r25, 0x01	; 1
 37e:	0e 94 96 01 	call	0x32c	; 0x32c <bufferWriteSimple>
 382:	80 93 16 01 	sts	0x0116, r24	; 0x800116 <status>
	if (status == BUFFER_FULL)
 386:	82 30       	cpi	r24, 0x02	; 2
 388:	31 f4       	brne	.+12     	; 0x396 <__vector_18+0x42>
	{
		rx_buffer.newest_index=0;
 38a:	eb e1       	ldi	r30, 0x1B	; 27
 38c:	f1 e0       	ldi	r31, 0x01	; 1
 38e:	16 82       	std	Z+6, r1	; 0x06
		rx_buffer.oldest_index=0;
 390:	17 82       	std	Z+7, r1	; 0x07
		Write_OLED_Char();
 392:	0e 94 48 01 	call	0x290	; 0x290 <Write_OLED_Char>
	}
 396:	ff 91       	pop	r31
 398:	ef 91       	pop	r30
 39a:	bf 91       	pop	r27
 39c:	af 91       	pop	r26
 39e:	9f 91       	pop	r25
 3a0:	8f 91       	pop	r24
 3a2:	7f 91       	pop	r23
 3a4:	6f 91       	pop	r22
 3a6:	5f 91       	pop	r21
 3a8:	4f 91       	pop	r20
 3aa:	3f 91       	pop	r19
 3ac:	2f 91       	pop	r18
 3ae:	0f 90       	pop	r0
 3b0:	0f be       	out	0x3f, r0	; 63
 3b2:	0f 90       	pop	r0
 3b4:	1f 90       	pop	r1
 3b6:	18 95       	reti

000003b8 <_exit>:
 3b8:	f8 94       	cli

000003ba <__stop_program>:
 3ba:	ff cf       	rjmp	.-2      	; 0x3ba <__stop_program>
